// 1.
// AR used:
// ,------------------------,
// | Result first fib call  |
// |------------------------|
// | Previous arp           |
// |------------------------|
// | Return address         |
// |------------------------|
// | Argument 'n'           |
// |------------------------|
// | Return value           |
// '------------------------'

// 2.
// The ARs will be placed on a stack

// 3.
// see code below

// 4.
// The algorithm used is simple, but very inefficient because of the two recursive calls where the second call also
// calculates the answer of the first call, but this value is not used. See the test for a more efficient algorithm (but
// since it does not use recursion it is not a good alternative to the code of this question)


                loadI   0               => r_zero       // initialise the zero register
                i2i     sp              => r_arp        // initialise the ar pointer

                in      "Argument? "    => r_arg
                push    r_zero                          // result
                push    r_arg                           // argument
                loadI   #end_program    => r_1
                push    r_1                             // return address
                push    r_arp                           // previous arp
                push    r_zero                          // var_1
                subI    r_arp, 20       => r_arp
fib:            loadAI  r_arp, 12       => r_n          // load n

                loadI   1               => r_if
                cmp_LE  r_n, r_if       => r_if
                cbr     r_if            -> then, else   // n <= 1
then:           loadI   1               => r_return     // fib := 1
                jumpI                   -> end_if       // return to the end of the if
else:           subI    r_n, 2          => r_arg        // n-2
                push    r_zero                          // result
                push    r_arg                           // argument
                loadI   #return_first   => r_1
                push    r_1                             // return address
                push    r_arp                           // previous arp
                push    r_zero                          // var_1
                subI    r_arp, 20       => r_arp        // set the arp to the new value (equals 'sp')
                jumpI                   -> fib          // first call to fib in fib
return_first:   loadAI  r_arp, -4       => r_temp
                store   r_temp          => r_arp

                loadAI  r_arp, 12       => r_n          // load 'n' again because the register has been used elsewhere
                subI    r_n, 1          => r_arg        // n-1
                push    r_zero                          // result
                push    r_arg                           // argument
                loadI   #return_second  => r_1
                push    r_1                             // return address
                push    r_arp                           // previous arp
                push    r_zero                          // var_1
                subI    r_arp, 20       => r_arp        // see above
                jumpI                   -> fib          // second call to fib in fib
return_second:  loadAI  r_arp, -4       => r_1          // load the results
                load    r_arp           => r_2          // load the results
                add     r_1, r_2        => r_return     // add the results of the two functions
end_if:         pop                     => r_null       // var_1
                pop                     => r_arp        // previous arp
                pop                     => r_return_to  // return address
                pop                     => r_null       // argument
                store   r_return        => sp
                pop                     => r_null       // result
                jump                    -> r_return_to

end_program:    loadAI  r_arp, -4       => r_result
                out     "Result: ", r_result
